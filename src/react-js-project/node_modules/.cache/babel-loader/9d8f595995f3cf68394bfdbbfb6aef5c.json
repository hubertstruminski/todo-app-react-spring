{"ast":null,"code":"var _jsxFileName = \"/home/huber/todo-app/src/components/todo/TodoComponent.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService';\nimport AuthenticationService from './AuthenticationService';\n\nclass TodoComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      description: 'Learn Forms Now',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    let username = AuthenticationService.getLoggedInUserName();\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = 'Enter a Description';\n    } else if (values.description.length < 5) {\n      errors.description = 'Enter at least 5 characters in Description';\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = 'Enter a valid targetDate';\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName();\n\n    if (this.state.id === -1) {\n      TodoDataService.createTodo(username, {\n        id: this.state.id,\n        description: values.description,\n        targetDate: values.targetDate\n      }).then(() => this.props.history.push('/todos'));\n    } else {\n      TodoDataService.updateTodo(username, this.state.id, {\n        id: this.state.id,\n        description: values.description,\n        targetDate: values.targetDate\n      }).then(() => this.props.history.push('/todos'));\n    }\n  }\n\n  render() {\n    let description = this.state.description;\n    let targetDate = this.state.targetDate; // let {description, targetDate} = this.state\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Todo\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        description: description,\n        targetDate: targetDate\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"targetDate\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Target Date\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"date\",\n      name: \"targetDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/home/huber/todo-app/src/components/todo/TodoComponent.js"],"names":["React","moment","Formik","Form","Field","ErrorMessage","TodoDataService","AuthenticationService","TodoComponent","Component","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","getLoggedInUserName","retrieveTodo","then","response","setState","data","values","errors","length","isValid","createTodo","history","push","updateTodo","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService';\nimport AuthenticationService from './AuthenticationService';\n\nclass TodoComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            description: 'Learn Forms Now',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName();\n        TodoDataService.retrieveTodo(username, this.state.id)\n        .then(response => this.setState({\n            description: response.data.description,\n            targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n        }));\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.description) {\n            errors.description = 'Enter a Description'\n        } else if(values.description.length < 5) {\n            errors.description = 'Enter at least 5 characters in Description'\n        }\n\n        if(!moment(values.targetDate).isValid()) {\n            errors.targetDate = 'Enter a valid targetDate';\n        }\n        return errors;\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName();\n        \n        if(this.state.id === -1) {\n            TodoDataService.createTodo(username, {\n                id: this.state.id,\n                description: values.description,\n                targetDate: values.targetDate\n            }).then(() => this.props.history.push('/todos'))\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, {\n                id: this.state.id,\n                description: values.description,\n                targetDate: values.targetDate\n            }).then(() => this.props.history.push('/todos'))\n        }\n    }\n    \n    render() {\n        let description = this.state.description;\n        let targetDate = this.state.targetDate;\n        // let {description, targetDate} = this.state\n        return (\n            <div>\n                <h1>Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{description: description, targetDate: targetDate}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n                                    <button type=\"submit\" className=\"btn btn-success\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}