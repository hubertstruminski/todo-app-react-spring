{"ast":null,"code":"import { request } from \"http\";\nimport axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'user';\n    let password = '1234';\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/huber/todo-app/src/components/todo/AuthenticationService.js"],"names":["request","axios","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","window","btoa","interceptors","use","config","headers","authorization"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,sBAAL;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,GAAG;AACrB,QAAIJ,QAAQ,GAAG,MAAf;AACA,QAAIC,QAAQ,GAAG,MAAf;AAEA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAJ,IAAAA,KAAK,CAACiB,YAAN,CAAmBlB,OAAnB,CAA2BmB,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKT,cAAR,EAAwB;AACpBS,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BP,eAA/B;AACH;;AACD,aAAOK,MAAP;AACH,KANL;AAQH;;AAtCuB;;AAyC5B,eAAe,IAAIlB,qBAAJ,EAAf","sourcesContent":["import { request } from \"http\";\n\nimport axios from 'axios';\n\nclass AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors();\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) {\n            return false;\n        }\n        return true;\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors() {\n        let username = 'user';\n        let password = '1234';\n\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}