{"ast":null,"code":"// import { request } from \"http\";\nimport axios from 'axios';\n\nclass AuthenticationService {\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.getComputedStyle('http://localhost:8081/basicauth', {\n      headers: {\n        authorization: createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/huber/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","createBasicAuthToken","username","password","window","btoa","executeBasicAuthenticationService","getComputedStyle","headers","authorization","registerSuccessfulLogin","basicAuthHeader","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDG,EAAAA,iCAAiC,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAOJ,KAAK,CAACQ,gBAAN,CAAuB,iCAAvB,EAA0D;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAER,oBAAoB,CAACC,QAAD,EAAWC,QAAX;AAApC;AAAV,KAA1D,CAAP;AACH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AACxC,QAAIQ,eAAe,GAAG,WAAWP,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAS,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4BH,eAA5B;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,CAACH,eAAD,EAAkB;AACpCZ,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,cAAR,EAAwB;AACpBO,QAAAA,MAAM,CAAChB,OAAP,CAAeC,aAAf,GAA+BE,eAA/B;AACH;;AACD,aAAOa,MAAP;AACH,KANL;AAQH;;AA7CuB;;AAgD5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["// import { request } from \"http\";\n\nimport axios from 'axios';\n\nclass AuthenticationService {\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    executeBasicAuthenticationService(username, password) {\n        \n        return axios.getComputedStyle('http://localhost:8081/basicauth', {headers: {authorization: createBasicAuthToken(username, password)}})\n    }\n\n    registerSuccessfulLogin(username, password) {\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(basicAuthHeader);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) {\n            return false;\n        }\n        return true;\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}