{"version":3,"sources":["components/todo/AuthenticationService.js","components/todo/LoginComponent.js","api/todo/HelloWorldService.js","components/todo/WelcomeComponent.js","components/todo/ErrorComponent.js","api/todo/TodoDataService.js","components/todo/ListTodosComponent.js","components/todo/HeaderComponent.js","components/todo/FooterComponent.js","components/todo/LogoutComponent.js","components/todo/AuthenticatedRoute.js","components/todo/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["todo_AuthenticationService","username","password","sessionStorage","setItem","removeItem","getItem","user","ShowInvalidCredentials","props","hasLoginFailed","react_default","a","createElement","className","ShowLoginSuccessMessage","showSuccessMessage","LoginComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","loginClicked","event","setState","defineProperty","target","name","value","AuthenticationService","registerSuccessfulLogin","history","push","concat","type","onChange","onClick","React","Component","todo_HelloWorldService","axios","get","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessfulResponse","handleError","Fragment","match","params","react_router_dom","to","_this2","HelloWorldService","executeHelloWorldPathVariableService","then","response","catch","error","console","log","data","message","ErrorComponent","todo_TodoDataService","ListTodosComponent","todos","getLoggedInUserName","TodoDataService","retrieveAllTodos","map","todo","key","id","description","done","toString","targetDate","HeaderComponent","isUserLoggedIn","href","logout","FooterComponent","LogoutComponent","AuthenticatedRoute","react_router","TodoApp","todo_HeaderComponent","path","exact","component","todo_AuthenticatedRoute","todo_FooterComponent","App","todo_TodoApp","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.886f45d5.chunk.js","sourcesContent":["class AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) {\n            return false;\n        }\n        return true;\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) return ''\n        return user\n    }\n}\n\nexport default new AuthenticationService();","import React from 'react';\nimport AuthenticationService from './AuthenticationService';\n\nclass LoginComponent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: 'user',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.loginClicked = this.loginClicked.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ \n            [event.target.name]: event.target.value \n        });\n    }\n\n    loginClicked() {\n        if(this.state.username === 'user' && this.state.password === '1234') {\n            AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password);\n            this.props.history.push(`/welcome/${this.state.username}`);\n            this.setState({showSuccessMessage: true});\n        } else {\n            this.setState({showSuccessMessage: false});\n            this.setState({hasLoginFailed: true});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    <ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed} />\n                    <ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage} />\n                    Username: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked} >Login</button>\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nfunction ShowInvalidCredentials(props) {\n    if(props.hasLoginFailed) {\n        return <div className=\"alert alert-warning\">Invalid Credentials</div>;\n    }\n    return null;\n}\n\nfunction ShowLoginSuccessMessage(props) {\n    if(props.showSuccessMessage) {\n        return <div>Login Successful.</div>\n    }\n    return null;\n}\n\nexport default LoginComponent;","import axios from \"axios\";\n\nclass HelloWorldService {\n    executeHelloWorldService() {\n        return axios.get('http://localhost:8081/hello-world');\n    }\n\n    executeHelloWorldBeanService() {\n        return axios.get('http://localhost:8081/hello-world-bean');\n    }\n\n    executeHelloWorldPathVariableService(name) {\n        return axios.get(`http://localhost:8081/hello-world/path-variable/${name}`);\n    }\n}\n\nexport default new HelloWorldService();","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport HelloWorldService from '../../api/todo/HelloWorldService';\n\nclass WelcomeComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this);\n        this.state = {\n            welcomeMessage: ''\n        }\n\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n        this.handleError = this.handleError.bind(this);\n    }\n    \n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                    Welcome {this.props.match.params.name}\n                    <br />\n                    You can manage your todos <Link to=\"/todos\">here</Link>\n                </div>\n                <div className=\"container\">\n                    Click here to get a customized welcome message.\n                    <button onClick={this.retrieveWelcomeMessage} className=\"btn btn-success\">Get Welcome Message</button>\n                </div>\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n            </>\n        );\n    }\n\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then(response => this.handleSuccessfulResponse(response));\n    \n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then(response => this.handleSuccessfulResponse(response));\n\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n        .then(response => this.handleSuccessfulResponse(response))\n        .catch(error => this.handleError);\n    }\n\n    handleSuccessfulResponse(response) {\n        console.log(response);\n        this.setState({welcomeMessage: response.data.message});\n    }\n\n    handleError(error) {\n        console.log(error);\n        this.setState({welcomeMessage: error.response.data.message});\n    }\n}\n\nexport default WelcomeComponent;","import React from 'react';\n\nclass ErrorComponent extends React.Component {\n    render() {\n        return <div>An Error Occurred. I don't know what to do! Contact support at ...</div>\n    }\n}\n\nexport default ErrorComponent;","import axios from 'axios';\n\nclass TodoDataService {\n    retrieveAllTodos(name) {\n        return axios.get(`http:localhost:8081/users/${name}/todos`);\n    }\n}\nexport default new TodoDataService();","import React from 'react';\nimport TodoDataService from '../../api/todo/TodoDataService';\nimport AuthenticationService from './AuthenticationService';\n\nclass ListTodosComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        }\n    }\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName();\n        TodoDataService.retrieveAllTodos(username)\n        .then(\n            response => {\n                this.setState({ todos: response.data })\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>List Todos</h1>\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>id</th>\n                                <th>description</th>\n                                <th>Target Date</th>\n                                <th>Is Completed?</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map (\n                                    todo =>\n                                    <tr key={todo.id}>\n                                        <td>{todo.id}</td>\n                                        <td>{todo.description}</td>\n                                        <td>{todo.done.toString()}</td>\n                                        <td>{todo.targetDate.toString()}</td>\n                                    </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ListTodosComponent;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthenticationService from './AuthenticationService';\n\nclass HeaderComponent extends React.Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        console.log(isUserLoggedIn);\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"http://www.google.pl\" className=\"navbar-brand\">in28minutes</a></div>\n                    <ul className=\"navbar-nav\">\n                       { isUserLoggedIn && <li>\n                            <Link to=\"/welcome\" className=\"nav-link\">Home</Link>\n                        </li>}\n                       { isUserLoggedIn && <li>\n                            <Link to=\"/todos\" className=\"nav-link\">Todos</Link>\n                        </li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        <li>\n                            <Link to=\"/login\" className=\"nav-link\">Login</Link>\n                        </li>\n                        { isUserLoggedIn && <li>\n                            <Link to=\"/logout\" className=\"nav-link\" onClick={AuthenticationService.logout}>Logout</Link>\n                        </li>}\n                    </ul>\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default HeaderComponent;","import React from 'react';\n\nclass FooterComponent extends React.Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All rights reserved 2018</span>\n            </footer>\n        );\n    }\n}\n\nexport default FooterComponent;","import React from 'react';\n\nclass LogoutComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank you for using our application.\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LogoutComponent;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './AuthenticationService';\n\nclass AuthenticatedRoute extends React.Component {\n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n    }\n}\n\nexport default AuthenticatedRoute;","import React from 'react';\n// import './App.css';\nimport LoginComponent from './LoginComponent';\nimport WelcomeComponent from './WelcomeComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ErrorComponent from './ErrorComponent';\nimport ListTodosComponent from './ListTodosComponent';\nimport HeaderComponent from './HeaderComponent';\nimport FooterComponent from './FooterComponent';\nimport LogoutComponent from './LogoutComponent';\nimport AuthenticatedRoute from './AuthenticatedRoute';\n\nclass TodoApp extends React.Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                        <HeaderComponent />\n                            <Switch>\n                                <Route path=\"/\" exact component={LoginComponent} />\n                                <Route path=\"/login\" component={LoginComponent} />\n                                <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent} />\n                                <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent} />\n                                <AuthenticatedRoute path=\"/logout\" component={LogoutComponent} />\n                                <Route component={ErrorComponent} />\n                            </Switch>\n                        <FooterComponent />\n                    </>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport './App.css';\nimport './bootstrap.css';\nimport TodoApp from './components/todo/TodoApp';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <TodoApp />\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}